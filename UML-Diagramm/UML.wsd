@startuml BlackJack
class Spieler {
    - String name;
    - int jetons;

    + Spieler(String name, int startJetons);

    + getName(): String;
    + getJetons(): int;
    + addJetons(int betrag): void;
    + removeJetons(int betrag): void;
}

abstract class CasinospielBasis {
    # Spieler player;
    - String name;

    + CasinospielBasis(String name, Spieler player);

    + getName(): String;
    + ersteNachricht(): String;
    + verarbeiteEingabe(String input): String;
    + neuesSpiel(): void;
}


class BlackJackGame extends CasinospielBasis{
    - Scanner sc;
    - GamePhases gamePhase;
    - String[] cards;
    - String[] prefix;
    - ArrayList<String> deck;
    - ArrayList<String> handDealer;
    - ArrayList<String> handPlayer; 
    - int playerBet;

    + BlackJackGame(Spieler player): void;

    - getPlayerBet(): int;
    - setPlayerBet(int bet): void;
    - getHand(GamePlayers player): ArrayList<String>;
    - getRandomCard(): String;
    - resetDeck(): void;
    - resetHand(GamePlayers player): void;
    - formatHandToString(GamePlayers player): String;
    - calculateHand(GamePlayers player): int;
    - gameResult(): void;
    - playerTurn(): void;
    - dealerTurn(): void;
    - checkJetonInput(String input): int;
}

class GamePhases {
    + enum GamePhases;
}

class GamePlayers {
    + enum GamePlayers;
}

class GameResults {
    + enum GameResults;
}

Spieler --> CasinospielBasis : "has a"
GamePhases --> BlackJackGame: "has a"
GamePlayers --> BlackJackGame: "has a"
GameResults --> BlackJackGame: "has a"
@enduml
